workflows:
  ios_release:
    name: QuoteBot iOS Release
    max_build_duration: 60
    environment:
      flutter: stable
      xcode: 15.4
      vars:
        BUNDLE_ID: com.QuoteBot.quotebot
        IOS_DEPLOYMENT_TARGET: "13.0"
    cache:
      cache_paths:
        - ~/.pub-cache
        - $CM_BUILD_DIR/build

    scripts:
      - name: Flutter deps
        script: |
          set -euo pipefail
          flutter --version
          flutter pub get

      - name: Set unique build number
        script: |
          set -euo pipefail
          export BUILD_NUMBER=$(date +%s)
          echo "BUILD_NUMBER=$BUILD_NUMBER" | tee -a $CM_ENV

      # Create/prepare iOS project BEFORE signing
      - name: Generate iOS project (no codesign yet)
        script: |
          set -euo pipefail
          if [ ! -d "ios" ]; then
            echo "ios/ not found -> flutter create ."
            flutter create .
          fi

          # Ensure iOS minimum version and install pods
          cd ios
          if grep -q "^platform :ios" Podfile; then
            sed -i '' "s/^platform :ios.*/platform :ios, '$IOS_DEPLOYMENT_TARGET'/" Podfile
          else
            echo "platform :ios, '$IOS_DEPLOYMENT_TARGET'" | cat - Podfile > Podfile.tmp && mv Podfile.tmp Podfile
          fi

          pod repo update
          pod install
          cd ..

          # First pass to generate Runner.xcworkspace (no codesign)
          flutter build ios --release --no-codesign

          # Ensure Pods xcconfigs are included to avoid CocoaPods base config warning
          for f in ios/Flutter/Debug.xcconfig ios/Flutter/Release.xcconfig; do
            if ! grep -q "Pods-Runner" "$f"; then
              # inject matching Debug/Release xcconfig include
              NAME=$(basename "$f")
              echo '#include? "Pods/Target Support Files/Pods-Runner/Pods-Runner.'"$NAME"'"' > tmp.xcconfig
              cat "$f" >> tmp.xcconfig
              mv tmp.xcconfig "$f"
            fi
          done

          # Set PRODUCT_BUNDLE_IDENTIFIER in the Xcode project
          PBXPROJ="ios/Runner.xcodeproj/project.pbxproj"
          sed -i '' "s/PRODUCT_BUNDLE_IDENTIFIER = [^;]*;/PRODUCT_BUNDLE_IDENTIFIER = $BUNDLE_ID;/" "$PBXPROJ"

      # Automatic signing with App Store Connect API key
      - name: Configure automatic signing (ASC API key)
        script: |
          set -euo pipefail
          keychain initialize
          app-store-connect set-api-key \
            --issuer-id "$APP_STORE_CONNECT_ISSUER_ID" \
            --key-id "$APP_STORE_CONNECT_KEY_IDENTIFIER" \
            --key "$APP_STORE_CONNECT_PRIVATE_KEY"

          # Fetch/create certs + provisioning profile for App Store distribution
          app-store-connect fetch-signing-files "$BUNDLE_ID" --type IOS_APP_STORE --create
          keychain add-certificates

          # Apply provisioning profiles to the Xcode project
          xcode-project use-profiles

      - name: Build archive and export IPA (Xcode)
        script: |
          set -euo pipefail
          # Build an archive with Xcode using the Runner scheme
          xcode-project build-ipa \
            --workspace "ios/Runner.xcworkspace" \
            --scheme "Runner" \
            --archive-path "$CM_BUILD_DIR/build/ios/archive/Runner.xcarchive" \
            --configuration "Release"

          echo "IPA contents:"
          ls -R build/ios/ipa || true

      - name: Upload to TestFlight
        script: |
          set -euo pipefail
          IPA_PATH=$(find build/ios/ipa -name "*.ipa" | head -1)
          if [ -z "$IPA_PATH" ]; then
            echo "‚ùå No IPA produced"; exit 1
          fi
          echo "Found IPA: $IPA_PATH"
          app-store-connect publish --path "$IPA_PATH" --submit-to-testflight true

    artifacts:
      - build/ios/ipa/*.ipa
